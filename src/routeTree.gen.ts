/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TopicsRouteImport } from './routes/topics'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TopicsIndexRouteImport } from './routes/topics.index'
import { Route as TopicsTknRouteImport } from './routes/topics.tkn'
import { Route as TopicsTknIndexRouteImport } from './routes/topics.tkn.index'
import { Route as TopicsTknProjectProposalRouteImport } from './routes/topics.tkn.project-proposal'

const TopicsRoute = TopicsRouteImport.update({
  id: '/topics',
  path: '/topics',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsIndexRoute = TopicsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TopicsRoute,
} as any)
const TopicsTknRoute = TopicsTknRouteImport.update({
  id: '/tkn',
  path: '/tkn',
  getParentRoute: () => TopicsRoute,
} as any)
const TopicsTknIndexRoute = TopicsTknIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TopicsTknRoute,
} as any)
const TopicsTknProjectProposalRoute =
  TopicsTknProjectProposalRouteImport.update({
    id: '/project-proposal',
    path: '/project-proposal',
    getParentRoute: () => TopicsTknRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/topics': typeof TopicsRouteWithChildren
  '/topics/tkn': typeof TopicsTknRouteWithChildren
  '/topics/': typeof TopicsIndexRoute
  '/topics/tkn/project-proposal': typeof TopicsTknProjectProposalRoute
  '/topics/tkn/': typeof TopicsTknIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/topics': typeof TopicsIndexRoute
  '/topics/tkn/project-proposal': typeof TopicsTknProjectProposalRoute
  '/topics/tkn': typeof TopicsTknIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/topics': typeof TopicsRouteWithChildren
  '/topics/tkn': typeof TopicsTknRouteWithChildren
  '/topics/': typeof TopicsIndexRoute
  '/topics/tkn/project-proposal': typeof TopicsTknProjectProposalRoute
  '/topics/tkn/': typeof TopicsTknIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/topics'
    | '/topics/tkn'
    | '/topics/'
    | '/topics/tkn/project-proposal'
    | '/topics/tkn/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/topics' | '/topics/tkn/project-proposal' | '/topics/tkn'
  id:
    | '__root__'
    | '/'
    | '/topics'
    | '/topics/tkn'
    | '/topics/'
    | '/topics/tkn/project-proposal'
    | '/topics/tkn/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TopicsRoute: typeof TopicsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/topics': {
      id: '/topics'
      path: '/topics'
      fullPath: '/topics'
      preLoaderRoute: typeof TopicsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics/': {
      id: '/topics/'
      path: '/'
      fullPath: '/topics/'
      preLoaderRoute: typeof TopicsIndexRouteImport
      parentRoute: typeof TopicsRoute
    }
    '/topics/tkn': {
      id: '/topics/tkn'
      path: '/tkn'
      fullPath: '/topics/tkn'
      preLoaderRoute: typeof TopicsTknRouteImport
      parentRoute: typeof TopicsRoute
    }
    '/topics/tkn/': {
      id: '/topics/tkn/'
      path: '/'
      fullPath: '/topics/tkn/'
      preLoaderRoute: typeof TopicsTknIndexRouteImport
      parentRoute: typeof TopicsTknRoute
    }
    '/topics/tkn/project-proposal': {
      id: '/topics/tkn/project-proposal'
      path: '/project-proposal'
      fullPath: '/topics/tkn/project-proposal'
      preLoaderRoute: typeof TopicsTknProjectProposalRouteImport
      parentRoute: typeof TopicsTknRoute
    }
  }
}

interface TopicsTknRouteChildren {
  TopicsTknProjectProposalRoute: typeof TopicsTknProjectProposalRoute
  TopicsTknIndexRoute: typeof TopicsTknIndexRoute
}

const TopicsTknRouteChildren: TopicsTknRouteChildren = {
  TopicsTknProjectProposalRoute: TopicsTknProjectProposalRoute,
  TopicsTknIndexRoute: TopicsTknIndexRoute,
}

const TopicsTknRouteWithChildren = TopicsTknRoute._addFileChildren(
  TopicsTknRouteChildren,
)

interface TopicsRouteChildren {
  TopicsTknRoute: typeof TopicsTknRouteWithChildren
  TopicsIndexRoute: typeof TopicsIndexRoute
}

const TopicsRouteChildren: TopicsRouteChildren = {
  TopicsTknRoute: TopicsTknRouteWithChildren,
  TopicsIndexRoute: TopicsIndexRoute,
}

const TopicsRouteWithChildren =
  TopicsRoute._addFileChildren(TopicsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TopicsRoute: TopicsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
